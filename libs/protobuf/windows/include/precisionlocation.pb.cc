// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: precisionlocation.proto

#include "precisionlocation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
PROTOBUF_CONSTEXPR PrecisionLocation::PrecisionLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geopointsrc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.altsrc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrecisionLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrecisionLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrecisionLocationDefaultTypeInternal() {}
  union {
    PrecisionLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrecisionLocationDefaultTypeInternal _PrecisionLocation_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class PrecisionLocation::_Internal {
 public:
};

PrecisionLocation::PrecisionLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
}
PrecisionLocation::PrecisionLocation(const PrecisionLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrecisionLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geopointsrc_){}
    , decltype(_impl_.altsrc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.geopointsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geopointsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_geopointsrc().empty()) {
    _this->_impl_.geopointsrc_.Set(from._internal_geopointsrc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.altsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.altsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_altsrc().empty()) {
    _this->_impl_.altsrc_.Set(from._internal_altsrc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
}

inline void PrecisionLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geopointsrc_){}
    , decltype(_impl_.altsrc_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.geopointsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geopointsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.altsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.altsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrecisionLocation::~PrecisionLocation() {
  // @@protoc_insertion_point(destructor:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrecisionLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.geopointsrc_.Destroy();
  _impl_.altsrc_.Destroy();
}

void PrecisionLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrecisionLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.geopointsrc_.ClearToEmpty();
  _impl_.altsrc_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PrecisionLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string geopointsrc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_geopointsrc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string altsrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_altsrc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrecisionLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string geopointsrc = 1;
  if (!this->_internal_geopointsrc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geopointsrc().data(), static_cast<int>(this->_internal_geopointsrc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.PrecisionLocation.geopointsrc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geopointsrc(), target);
  }

  // string altsrc = 2;
  if (!this->_internal_altsrc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_altsrc().data(), static_cast<int>(this->_internal_altsrc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.PrecisionLocation.altsrc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_altsrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  return target;
}

size_t PrecisionLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geopointsrc = 1;
  if (!this->_internal_geopointsrc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geopointsrc());
  }

  // string altsrc = 2;
  if (!this->_internal_altsrc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_altsrc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrecisionLocation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrecisionLocation*>(
      &from));
}

void PrecisionLocation::MergeFrom(const PrecisionLocation& from) {
  PrecisionLocation* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_geopointsrc().empty()) {
    _this->_internal_set_geopointsrc(from._internal_geopointsrc());
  }
  if (!from._internal_altsrc().empty()) {
    _this->_internal_set_altsrc(from._internal_altsrc());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrecisionLocation::CopyFrom(const PrecisionLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atakmap.commoncommo.protobuf.v1.PrecisionLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionLocation::IsInitialized() const {
  return true;
}

void PrecisionLocation::InternalSwap(PrecisionLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.geopointsrc_, lhs_arena,
      &other->_impl_.geopointsrc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.altsrc_, lhs_arena,
      &other->_impl_.altsrc_, rhs_arena
  );
}

std::string PrecisionLocation::GetTypeName() const {
  return "atakmap.commoncommo.protobuf.v1.PrecisionLocation";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atakmap::commoncommo::protobuf::v1::PrecisionLocation*
Arena::CreateMaybeMessage< ::atakmap::commoncommo::protobuf::v1::PrecisionLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atakmap::commoncommo::protobuf::v1::PrecisionLocation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
