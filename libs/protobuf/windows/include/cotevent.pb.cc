// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cotevent.proto

#include "cotevent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
PROTOBUF_CONSTEXPR CotEvent::CotEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.access_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.how_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_.sendtime_)*/uint64_t{0u}
  , /*decltype(_impl_.starttime_)*/uint64_t{0u}
  , /*decltype(_impl_.staletime_)*/uint64_t{0u}
  , /*decltype(_impl_.lat_)*/0
  , /*decltype(_impl_.lon_)*/0
  , /*decltype(_impl_.hae_)*/0
  , /*decltype(_impl_.ce_)*/0
  , /*decltype(_impl_.le_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CotEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CotEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CotEventDefaultTypeInternal() {}
  union {
    CotEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CotEventDefaultTypeInternal _CotEvent_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class CotEvent::_Internal {
 public:
  static const ::atakmap::commoncommo::protobuf::v1::Detail& detail(const CotEvent* msg);
};

const ::atakmap::commoncommo::protobuf::v1::Detail&
CotEvent::_Internal::detail(const CotEvent* msg) {
  return *msg->_impl_.detail_;
}
void CotEvent::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
CotEvent::CotEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atakmap.commoncommo.protobuf.v1.CotEvent)
}
CotEvent::CotEvent(const CotEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CotEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.access_){}
    , decltype(_impl_.qos_){}
    , decltype(_impl_.opex_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.how_){}
    , decltype(_impl_.detail_){nullptr}
    , decltype(_impl_.sendtime_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.staletime_){}
    , decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.hae_){}
    , decltype(_impl_.ce_){}
    , decltype(_impl_.le_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.access_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access().empty()) {
    _this->_impl_.access_.Set(from._internal_access(), 
      _this->GetArenaForAllocation());
  }
  _impl_.qos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_qos().empty()) {
    _this->_impl_.qos_.Set(from._internal_qos(), 
      _this->GetArenaForAllocation());
  }
  _impl_.opex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opex().empty()) {
    _this->_impl_.opex_.Set(from._internal_opex(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.how_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.how_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_how().empty()) {
    _this->_impl_.how_.Set(from._internal_how(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::atakmap::commoncommo::protobuf::v1::Detail(*from._impl_.detail_);
  }
  ::memcpy(&_impl_.sendtime_, &from._impl_.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.le_) -
    reinterpret_cast<char*>(&_impl_.sendtime_)) + sizeof(_impl_.le_));
  // @@protoc_insertion_point(copy_constructor:atakmap.commoncommo.protobuf.v1.CotEvent)
}

inline void CotEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.access_){}
    , decltype(_impl_.qos_){}
    , decltype(_impl_.opex_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.how_){}
    , decltype(_impl_.detail_){nullptr}
    , decltype(_impl_.sendtime_){uint64_t{0u}}
    , decltype(_impl_.starttime_){uint64_t{0u}}
    , decltype(_impl_.staletime_){uint64_t{0u}}
    , decltype(_impl_.lat_){0}
    , decltype(_impl_.lon_){0}
    , decltype(_impl_.hae_){0}
    , decltype(_impl_.ce_){0}
    , decltype(_impl_.le_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.access_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.qos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.opex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.how_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.how_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CotEvent::~CotEvent() {
  // @@protoc_insertion_point(destructor:atakmap.commoncommo.protobuf.v1.CotEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CotEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.access_.Destroy();
  _impl_.qos_.Destroy();
  _impl_.opex_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.how_.Destroy();
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void CotEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CotEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:atakmap.commoncommo.protobuf.v1.CotEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.access_.ClearToEmpty();
  _impl_.qos_.ClearToEmpty();
  _impl_.opex_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.how_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  ::memset(&_impl_.sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.le_) -
      reinterpret_cast<char*>(&_impl_.sendtime_)) + sizeof(_impl_.le_));
  _internal_metadata_.Clear<std::string>();
}

const char* CotEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string access = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_access();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string qos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_qos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string opex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_opex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 sendTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 startTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 staleTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.staletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string how = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_how();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // double lat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double hae = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.hae_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ce = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.ce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double le = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.le_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Detail detail = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CotEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atakmap.commoncommo.protobuf.v1.CotEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string access = 2;
  if (!this->_internal_access().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access().data(), static_cast<int>(this->_internal_access().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.access");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access(), target);
  }

  // string qos = 3;
  if (!this->_internal_qos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_qos().data(), static_cast<int>(this->_internal_qos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.qos");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_qos(), target);
  }

  // string opex = 4;
  if (!this->_internal_opex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opex().data(), static_cast<int>(this->_internal_opex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.opex");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_opex(), target);
  }

  // string uid = 5;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uid(), target);
  }

  // uint64 sendTime = 6;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sendtime(), target);
  }

  // uint64 startTime = 7;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_starttime(), target);
  }

  // uint64 staleTime = 8;
  if (this->_internal_staletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_staletime(), target);
  }

  // string how = 9;
  if (!this->_internal_how().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_how().data(), static_cast<int>(this->_internal_how().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.CotEvent.how");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_how(), target);
  }

  // double lat = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_lat(), target);
  }

  // double lon = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_lon(), target);
  }

  // double hae = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hae = this->_internal_hae();
  uint64_t raw_hae;
  memcpy(&raw_hae, &tmp_hae, sizeof(tmp_hae));
  if (raw_hae != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_hae(), target);
  }

  // double ce = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ce = this->_internal_ce();
  uint64_t raw_ce;
  memcpy(&raw_ce, &tmp_ce, sizeof(tmp_ce));
  if (raw_ce != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_ce(), target);
  }

  // double le = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_le = this->_internal_le();
  uint64_t raw_le;
  memcpy(&raw_le, &tmp_le, sizeof(tmp_le));
  if (raw_le != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_le(), target);
  }

  // .atakmap.commoncommo.protobuf.v1.Detail detail = 15;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atakmap.commoncommo.protobuf.v1.CotEvent)
  return target;
}

size_t CotEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atakmap.commoncommo.protobuf.v1.CotEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string access = 2;
  if (!this->_internal_access().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access());
  }

  // string qos = 3;
  if (!this->_internal_qos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qos());
  }

  // string opex = 4;
  if (!this->_internal_opex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opex());
  }

  // string uid = 5;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string how = 9;
  if (!this->_internal_how().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_how());
  }

  // .atakmap.commoncommo.protobuf.v1.Detail detail = 15;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  // uint64 sendTime = 6;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sendtime());
  }

  // uint64 startTime = 7;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_starttime());
  }

  // uint64 staleTime = 8;
  if (this->_internal_staletime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_staletime());
  }

  // double lat = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double lon = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    total_size += 1 + 8;
  }

  // double hae = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hae = this->_internal_hae();
  uint64_t raw_hae;
  memcpy(&raw_hae, &tmp_hae, sizeof(tmp_hae));
  if (raw_hae != 0) {
    total_size += 1 + 8;
  }

  // double ce = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ce = this->_internal_ce();
  uint64_t raw_ce;
  memcpy(&raw_ce, &tmp_ce, sizeof(tmp_ce));
  if (raw_ce != 0) {
    total_size += 1 + 8;
  }

  // double le = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_le = this->_internal_le();
  uint64_t raw_le;
  memcpy(&raw_le, &tmp_le, sizeof(tmp_le));
  if (raw_le != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CotEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CotEvent*>(
      &from));
}

void CotEvent::MergeFrom(const CotEvent& from) {
  CotEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:atakmap.commoncommo.protobuf.v1.CotEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_access().empty()) {
    _this->_internal_set_access(from._internal_access());
  }
  if (!from._internal_qos().empty()) {
    _this->_internal_set_qos(from._internal_qos());
  }
  if (!from._internal_opex().empty()) {
    _this->_internal_set_opex(from._internal_opex());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_how().empty()) {
    _this->_internal_set_how(from._internal_how());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::atakmap::commoncommo::protobuf::v1::Detail::MergeFrom(
        from._internal_detail());
  }
  if (from._internal_sendtime() != 0) {
    _this->_internal_set_sendtime(from._internal_sendtime());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_staletime() != 0) {
    _this->_internal_set_staletime(from._internal_staletime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _this->_internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = from._internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    _this->_internal_set_lon(from._internal_lon());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hae = from._internal_hae();
  uint64_t raw_hae;
  memcpy(&raw_hae, &tmp_hae, sizeof(tmp_hae));
  if (raw_hae != 0) {
    _this->_internal_set_hae(from._internal_hae());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ce = from._internal_ce();
  uint64_t raw_ce;
  memcpy(&raw_ce, &tmp_ce, sizeof(tmp_ce));
  if (raw_ce != 0) {
    _this->_internal_set_ce(from._internal_ce());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_le = from._internal_le();
  uint64_t raw_le;
  memcpy(&raw_le, &tmp_le, sizeof(tmp_le));
  if (raw_le != 0) {
    _this->_internal_set_le(from._internal_le());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CotEvent::CopyFrom(const CotEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atakmap.commoncommo.protobuf.v1.CotEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CotEvent::IsInitialized() const {
  return true;
}

void CotEvent::InternalSwap(CotEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_, lhs_arena,
      &other->_impl_.access_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qos_, lhs_arena,
      &other->_impl_.qos_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.opex_, lhs_arena,
      &other->_impl_.opex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.how_, lhs_arena,
      &other->_impl_.how_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CotEvent, _impl_.le_)
      + sizeof(CotEvent::_impl_.le_)
      - PROTOBUF_FIELD_OFFSET(CotEvent, _impl_.detail_)>(
          reinterpret_cast<char*>(&_impl_.detail_),
          reinterpret_cast<char*>(&other->_impl_.detail_));
}

std::string CotEvent::GetTypeName() const {
  return "atakmap.commoncommo.protobuf.v1.CotEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atakmap::commoncommo::protobuf::v1::CotEvent*
Arena::CreateMaybeMessage< ::atakmap::commoncommo::protobuf::v1::CotEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atakmap::commoncommo::protobuf::v1::CotEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
