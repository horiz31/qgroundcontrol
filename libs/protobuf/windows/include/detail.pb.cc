// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detail.proto

#include "detail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
PROTOBUF_CONSTEXPR Detail::Detail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xmldetail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contact_)*/nullptr
  , /*decltype(_impl_.group_)*/nullptr
  , /*decltype(_impl_.precisionlocation_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.takv_)*/nullptr
  , /*decltype(_impl_.track_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetailDefaultTypeInternal() {}
  union {
    Detail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetailDefaultTypeInternal _Detail_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class Detail::_Internal {
 public:
  static const ::atakmap::commoncommo::protobuf::v1::Contact& contact(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Group& group(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& precisionlocation(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Status& status(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Takv& takv(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Track& track(const Detail* msg);
};

const ::atakmap::commoncommo::protobuf::v1::Contact&
Detail::_Internal::contact(const Detail* msg) {
  return *msg->_impl_.contact_;
}
const ::atakmap::commoncommo::protobuf::v1::Group&
Detail::_Internal::group(const Detail* msg) {
  return *msg->_impl_.group_;
}
const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation&
Detail::_Internal::precisionlocation(const Detail* msg) {
  return *msg->_impl_.precisionlocation_;
}
const ::atakmap::commoncommo::protobuf::v1::Status&
Detail::_Internal::status(const Detail* msg) {
  return *msg->_impl_.status_;
}
const ::atakmap::commoncommo::protobuf::v1::Takv&
Detail::_Internal::takv(const Detail* msg) {
  return *msg->_impl_.takv_;
}
const ::atakmap::commoncommo::protobuf::v1::Track&
Detail::_Internal::track(const Detail* msg) {
  return *msg->_impl_.track_;
}
void Detail::clear_contact() {
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
}
void Detail::clear_group() {
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
}
void Detail::clear_precisionlocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.precisionlocation_ != nullptr) {
    delete _impl_.precisionlocation_;
  }
  _impl_.precisionlocation_ = nullptr;
}
void Detail::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void Detail::clear_takv() {
  if (GetArenaForAllocation() == nullptr && _impl_.takv_ != nullptr) {
    delete _impl_.takv_;
  }
  _impl_.takv_ = nullptr;
}
void Detail::clear_track() {
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
}
Detail::Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atakmap.commoncommo.protobuf.v1.Detail)
}
Detail::Detail(const Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Detail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xmldetail_){}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.precisionlocation_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.takv_){nullptr}
    , decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.xmldetail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xmldetail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xmldetail().empty()) {
    _this->_impl_.xmldetail_.Set(from._internal_xmldetail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contact()) {
    _this->_impl_.contact_ = new ::atakmap::commoncommo::protobuf::v1::Contact(*from._impl_.contact_);
  }
  if (from._internal_has_group()) {
    _this->_impl_.group_ = new ::atakmap::commoncommo::protobuf::v1::Group(*from._impl_.group_);
  }
  if (from._internal_has_precisionlocation()) {
    _this->_impl_.precisionlocation_ = new ::atakmap::commoncommo::protobuf::v1::PrecisionLocation(*from._impl_.precisionlocation_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::atakmap::commoncommo::protobuf::v1::Status(*from._impl_.status_);
  }
  if (from._internal_has_takv()) {
    _this->_impl_.takv_ = new ::atakmap::commoncommo::protobuf::v1::Takv(*from._impl_.takv_);
  }
  if (from._internal_has_track()) {
    _this->_impl_.track_ = new ::atakmap::commoncommo::protobuf::v1::Track(*from._impl_.track_);
  }
  // @@protoc_insertion_point(copy_constructor:atakmap.commoncommo.protobuf.v1.Detail)
}

inline void Detail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xmldetail_){}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.precisionlocation_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.takv_){nullptr}
    , decltype(_impl_.track_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.xmldetail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xmldetail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Detail::~Detail() {
  // @@protoc_insertion_point(destructor:atakmap.commoncommo.protobuf.v1.Detail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.xmldetail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contact_;
  if (this != internal_default_instance()) delete _impl_.group_;
  if (this != internal_default_instance()) delete _impl_.precisionlocation_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.takv_;
  if (this != internal_default_instance()) delete _impl_.track_;
}

void Detail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:atakmap.commoncommo.protobuf.v1.Detail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xmldetail_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.precisionlocation_ != nullptr) {
    delete _impl_.precisionlocation_;
  }
  _impl_.precisionlocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.takv_ != nullptr) {
    delete _impl_.takv_;
  }
  _impl_.takv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.track_ != nullptr) {
    delete _impl_.track_;
  }
  _impl_.track_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Detail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string xmlDetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_xmldetail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Group group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_precisionlocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_takv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Track track = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atakmap.commoncommo.protobuf.v1.Detail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string xmlDetail = 1;
  if (!this->_internal_xmldetail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xmldetail().data(), static_cast<int>(this->_internal_xmldetail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.Detail.xmlDetail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_xmldetail(), target);
  }

  // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
  if (this->_internal_has_contact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contact(this),
        _Internal::contact(this).GetCachedSize(), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Group group = 3;
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
  if (this->_internal_has_precisionlocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::precisionlocation(this),
        _Internal::precisionlocation(this).GetCachedSize(), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
  if (this->_internal_has_takv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::takv(this),
        _Internal::takv(this).GetCachedSize(), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Track track = 7;
  if (this->_internal_has_track()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::track(this),
        _Internal::track(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atakmap.commoncommo.protobuf.v1.Detail)
  return target;
}

size_t Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atakmap.commoncommo.protobuf.v1.Detail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string xmlDetail = 1;
  if (!this->_internal_xmldetail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xmldetail());
  }

  // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
  if (this->_internal_has_contact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contact_);
  }

  // .atakmap.commoncommo.protobuf.v1.Group group = 3;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_);
  }

  // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
  if (this->_internal_has_precisionlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.precisionlocation_);
  }

  // .atakmap.commoncommo.protobuf.v1.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
  if (this->_internal_has_takv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.takv_);
  }

  // .atakmap.commoncommo.protobuf.v1.Track track = 7;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.track_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detail::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Detail*>(
      &from));
}

void Detail::MergeFrom(const Detail& from) {
  Detail* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:atakmap.commoncommo.protobuf.v1.Detail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_xmldetail().empty()) {
    _this->_internal_set_xmldetail(from._internal_xmldetail());
  }
  if (from._internal_has_contact()) {
    _this->_internal_mutable_contact()->::atakmap::commoncommo::protobuf::v1::Contact::MergeFrom(
        from._internal_contact());
  }
  if (from._internal_has_group()) {
    _this->_internal_mutable_group()->::atakmap::commoncommo::protobuf::v1::Group::MergeFrom(
        from._internal_group());
  }
  if (from._internal_has_precisionlocation()) {
    _this->_internal_mutable_precisionlocation()->::atakmap::commoncommo::protobuf::v1::PrecisionLocation::MergeFrom(
        from._internal_precisionlocation());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::atakmap::commoncommo::protobuf::v1::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_takv()) {
    _this->_internal_mutable_takv()->::atakmap::commoncommo::protobuf::v1::Takv::MergeFrom(
        from._internal_takv());
  }
  if (from._internal_has_track()) {
    _this->_internal_mutable_track()->::atakmap::commoncommo::protobuf::v1::Track::MergeFrom(
        from._internal_track());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Detail::CopyFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atakmap.commoncommo.protobuf.v1.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detail::IsInitialized() const {
  return true;
}

void Detail::InternalSwap(Detail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xmldetail_, lhs_arena,
      &other->_impl_.xmldetail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detail, _impl_.track_)
      + sizeof(Detail::_impl_.track_)
      - PROTOBUF_FIELD_OFFSET(Detail, _impl_.contact_)>(
          reinterpret_cast<char*>(&_impl_.contact_),
          reinterpret_cast<char*>(&other->_impl_.contact_));
}

std::string Detail::GetTypeName() const {
  return "atakmap.commoncommo.protobuf.v1.Detail";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atakmap::commoncommo::protobuf::v1::Detail*
Arena::CreateMaybeMessage< ::atakmap::commoncommo::protobuf::v1::Detail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atakmap::commoncommo::protobuf::v1::Detail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
