// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: takcontrol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_takcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_takcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_takcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_takcontrol_2eproto {
  static const uint32_t offsets[];
};
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
class TakControl;
struct TakControlDefaultTypeInternal;
extern TakControlDefaultTypeInternal _TakControl_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> ::atakmap::commoncommo::protobuf::v1::TakControl* Arena::CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::TakControl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class TakControl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:atakmap.commoncommo.protobuf.v1.TakControl) */ {
 public:
  inline TakControl() : TakControl(nullptr) {}
  ~TakControl() override;
  explicit PROTOBUF_CONSTEXPR TakControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakControl(const TakControl& from);
  TakControl(TakControl&& from) noexcept
    : TakControl() {
    *this = ::std::move(from);
  }

  inline TakControl& operator=(const TakControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakControl& operator=(TakControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TakControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakControl* internal_default_instance() {
    return reinterpret_cast<const TakControl*>(
               &_TakControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TakControl& a, TakControl& b) {
    a.Swap(&b);
  }
  inline void Swap(TakControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakControl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TakControl& from);
  void MergeFrom(const TakControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atakmap.commoncommo.protobuf.v1.TakControl";
  }
  protected:
  explicit TakControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactUidFieldNumber = 3,
    kMinProtoVersionFieldNumber = 1,
    kMaxProtoVersionFieldNumber = 2,
  };
  // string contactUid = 3;
  void clear_contactuid();
  const std::string& contactuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contactuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contactuid();
  PROTOBUF_NODISCARD std::string* release_contactuid();
  void set_allocated_contactuid(std::string* contactuid);
  private:
  const std::string& _internal_contactuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contactuid(const std::string& value);
  std::string* _internal_mutable_contactuid();
  public:

  // uint32 minProtoVersion = 1;
  void clear_minprotoversion();
  uint32_t minprotoversion() const;
  void set_minprotoversion(uint32_t value);
  private:
  uint32_t _internal_minprotoversion() const;
  void _internal_set_minprotoversion(uint32_t value);
  public:

  // uint32 maxProtoVersion = 2;
  void clear_maxprotoversion();
  uint32_t maxprotoversion() const;
  void set_maxprotoversion(uint32_t value);
  private:
  uint32_t _internal_maxprotoversion() const;
  void _internal_set_maxprotoversion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atakmap.commoncommo.protobuf.v1.TakControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactuid_;
    uint32_t minprotoversion_;
    uint32_t maxprotoversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_takcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TakControl

// uint32 minProtoVersion = 1;
inline void TakControl::clear_minprotoversion() {
  _impl_.minprotoversion_ = 0u;
}
inline uint32_t TakControl::_internal_minprotoversion() const {
  return _impl_.minprotoversion_;
}
inline uint32_t TakControl::minprotoversion() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.TakControl.minProtoVersion)
  return _internal_minprotoversion();
}
inline void TakControl::_internal_set_minprotoversion(uint32_t value) {
  
  _impl_.minprotoversion_ = value;
}
inline void TakControl::set_minprotoversion(uint32_t value) {
  _internal_set_minprotoversion(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.TakControl.minProtoVersion)
}

// uint32 maxProtoVersion = 2;
inline void TakControl::clear_maxprotoversion() {
  _impl_.maxprotoversion_ = 0u;
}
inline uint32_t TakControl::_internal_maxprotoversion() const {
  return _impl_.maxprotoversion_;
}
inline uint32_t TakControl::maxprotoversion() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.TakControl.maxProtoVersion)
  return _internal_maxprotoversion();
}
inline void TakControl::_internal_set_maxprotoversion(uint32_t value) {
  
  _impl_.maxprotoversion_ = value;
}
inline void TakControl::set_maxprotoversion(uint32_t value) {
  _internal_set_maxprotoversion(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.TakControl.maxProtoVersion)
}

// string contactUid = 3;
inline void TakControl::clear_contactuid() {
  _impl_.contactuid_.ClearToEmpty();
}
inline const std::string& TakControl::contactuid() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.TakControl.contactUid)
  return _internal_contactuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TakControl::set_contactuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contactuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.TakControl.contactUid)
}
inline std::string* TakControl::mutable_contactuid() {
  std::string* _s = _internal_mutable_contactuid();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.TakControl.contactUid)
  return _s;
}
inline const std::string& TakControl::_internal_contactuid() const {
  return _impl_.contactuid_.Get();
}
inline void TakControl::_internal_set_contactuid(const std::string& value) {
  
  _impl_.contactuid_.Set(value, GetArenaForAllocation());
}
inline std::string* TakControl::_internal_mutable_contactuid() {
  
  return _impl_.contactuid_.Mutable(GetArenaForAllocation());
}
inline std::string* TakControl::release_contactuid() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.TakControl.contactUid)
  return _impl_.contactuid_.Release();
}
inline void TakControl::set_allocated_contactuid(std::string* contactuid) {
  if (contactuid != nullptr) {
    
  } else {
    
  }
  _impl_.contactuid_.SetAllocated(contactuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contactuid_.IsDefault()) {
    _impl_.contactuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.TakControl.contactUid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_takcontrol_2eproto
