// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: takv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_takv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_takv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_takv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_takv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
class Takv;
class TakvDefaultTypeInternal;
extern TakvDefaultTypeInternal _Takv_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> ::atakmap::commoncommo::protobuf::v1::Takv* Arena::CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Takv>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class Takv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:atakmap.commoncommo.protobuf.v1.Takv) */ {
 public:
  inline Takv() : Takv(nullptr) {};
  virtual ~Takv();

  Takv(const Takv& from);
  Takv(Takv&& from) noexcept
    : Takv() {
    *this = ::std::move(from);
  }

  inline Takv& operator=(const Takv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Takv& operator=(Takv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Takv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Takv* internal_default_instance() {
    return reinterpret_cast<const Takv*>(
               &_Takv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Takv& a, Takv& b) {
    a.Swap(&b);
  }
  inline void Swap(Takv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Takv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Takv* New() const final {
    return CreateMaybeMessage<Takv>(nullptr);
  }

  Takv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Takv>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Takv& from);
  void MergeFrom(const Takv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Takv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atakmap.commoncommo.protobuf.v1.Takv";
  }
  protected:
  explicit Takv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kPlatformFieldNumber = 2,
    kOsFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device(
      std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string platform = 2;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform(
      std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string os = 3;
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:atakmap.commoncommo.protobuf.v1.Takv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_takv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Takv

// string device = 1;
inline void Takv::clear_device() {
  device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Takv::device() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Takv.device)
  return _internal_device();
}
inline void Takv::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Takv.device)
}
inline std::string* Takv::mutable_device() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Takv.device)
  return _internal_mutable_device();
}
inline const std::string& Takv::_internal_device() const {
  return device_.Get();
}
inline void Takv::_internal_set_device(const std::string& value) {
  
  device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Takv::set_device(std::string&& value) {
  
  device_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Takv.device)
}
inline void Takv::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Takv.device)
}
inline void Takv::set_device(const char* value,
    size_t size) {
  
  device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Takv.device)
}
inline std::string* Takv::_internal_mutable_device() {
  
  return device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Takv::release_device() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Takv.device)
  return device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Takv::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.device)
}
inline std::string* Takv::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Takv.device)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Takv::unsafe_arena_set_allocated_device(
    std::string* device) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device != nullptr) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.device)
}

// string platform = 2;
inline void Takv::clear_platform() {
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Takv::platform() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Takv.platform)
  return _internal_platform();
}
inline void Takv::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Takv.platform)
}
inline std::string* Takv::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Takv.platform)
  return _internal_mutable_platform();
}
inline const std::string& Takv::_internal_platform() const {
  return platform_.Get();
}
inline void Takv::_internal_set_platform(const std::string& value) {
  
  platform_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Takv::set_platform(std::string&& value) {
  
  platform_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Takv.platform)
}
inline void Takv::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Takv.platform)
}
inline void Takv::set_platform(const char* value,
    size_t size) {
  
  platform_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Takv.platform)
}
inline std::string* Takv::_internal_mutable_platform() {
  
  return platform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Takv::release_platform() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Takv.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Takv::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.platform)
}
inline std::string* Takv::unsafe_arena_release_platform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Takv.platform)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return platform_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Takv::unsafe_arena_set_allocated_platform(
    std::string* platform) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.platform)
}

// string os = 3;
inline void Takv::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Takv::os() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Takv.os)
  return _internal_os();
}
inline void Takv::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Takv.os)
}
inline std::string* Takv::mutable_os() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Takv.os)
  return _internal_mutable_os();
}
inline const std::string& Takv::_internal_os() const {
  return os_.Get();
}
inline void Takv::_internal_set_os(const std::string& value) {
  
  os_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Takv::set_os(std::string&& value) {
  
  os_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Takv.os)
}
inline void Takv::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Takv.os)
}
inline void Takv::set_os(const char* value,
    size_t size) {
  
  os_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Takv.os)
}
inline std::string* Takv::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Takv::release_os() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Takv.os)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Takv::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.os)
}
inline std::string* Takv::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Takv.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Takv::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.os)
}

// string version = 4;
inline void Takv::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Takv::version() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Takv.version)
  return _internal_version();
}
inline void Takv::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Takv.version)
}
inline std::string* Takv::mutable_version() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Takv.version)
  return _internal_mutable_version();
}
inline const std::string& Takv::_internal_version() const {
  return version_.Get();
}
inline void Takv::_internal_set_version(const std::string& value) {
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Takv::set_version(std::string&& value) {
  
  version_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Takv.version)
}
inline void Takv::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Takv.version)
}
inline void Takv::set_version(const char* value,
    size_t size) {
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Takv.version)
}
inline std::string* Takv::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Takv::release_version() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Takv.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Takv::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.version)
}
inline std::string* Takv::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Takv.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Takv::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Takv.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_takv_2eproto
