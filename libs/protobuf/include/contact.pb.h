// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contact_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contact_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contact_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contact_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> ::atakmap::commoncommo::protobuf::v1::Contact* Arena::CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Contact>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class Contact PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:atakmap.commoncommo.protobuf.v1.Contact) */ {
 public:
  inline Contact() : Contact(nullptr) {};
  virtual ~Contact();

  Contact(const Contact& from);
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }
  inline void Swap(Contact* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(nullptr);
  }

  Contact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atakmap.commoncommo.protobuf.v1.Contact";
  }
  protected:
  explicit Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 1,
    kCallsignFieldNumber = 2,
  };
  // string endpoint = 1;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endpoint(
      std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // string callsign = 2;
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_callsign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_callsign(
      std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // @@protoc_insertion_point(class_scope:atakmap.commoncommo.protobuf.v1.Contact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_contact_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// string endpoint = 1;
inline void Contact::clear_endpoint() {
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Contact::endpoint() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
  return _internal_endpoint();
}
inline void Contact::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}
inline std::string* Contact::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& Contact::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void Contact::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_endpoint(std::string&& value) {
  
  endpoint_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}
inline void Contact::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}
inline void Contact::set_endpoint(const char* value,
    size_t size) {
  
  endpoint_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}
inline std::string* Contact::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_endpoint() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}
inline std::string* Contact::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Contact::unsafe_arena_set_allocated_endpoint(
    std::string* endpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Contact.endpoint)
}

// string callsign = 2;
inline void Contact::clear_callsign() {
  callsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Contact::callsign() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Contact.callsign)
  return _internal_callsign();
}
inline void Contact::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}
inline std::string* Contact::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Contact.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& Contact::_internal_callsign() const {
  return callsign_.Get();
}
inline void Contact::_internal_set_callsign(const std::string& value) {
  
  callsign_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_callsign(std::string&& value) {
  
  callsign_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}
inline void Contact::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  callsign_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}
inline void Contact::set_callsign(const char* value,
    size_t size) {
  
  callsign_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}
inline std::string* Contact::_internal_mutable_callsign() {
  
  return callsign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_callsign() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Contact.callsign)
  return callsign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}
inline std::string* Contact::unsafe_arena_release_callsign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:atakmap.commoncommo.protobuf.v1.Contact.callsign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return callsign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Contact::unsafe_arena_set_allocated_callsign(
    std::string* callsign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      callsign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Contact.callsign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contact_2eproto
