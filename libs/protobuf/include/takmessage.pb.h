// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: takmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_takmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_takmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "cotevent.pb.h"
#include "takcontrol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_takmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_takmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
class TakMessage;
class TakMessageDefaultTypeInternal;
extern TakMessageDefaultTypeInternal _TakMessage_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> ::atakmap::commoncommo::protobuf::v1::TakMessage* Arena::CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::TakMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class TakMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:atakmap.commoncommo.protobuf.v1.TakMessage) */ {
 public:
  inline TakMessage() : TakMessage(nullptr) {};
  virtual ~TakMessage();

  TakMessage(const TakMessage& from);
  TakMessage(TakMessage&& from) noexcept
    : TakMessage() {
    *this = ::std::move(from);
  }

  inline TakMessage& operator=(const TakMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakMessage& operator=(TakMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TakMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakMessage* internal_default_instance() {
    return reinterpret_cast<const TakMessage*>(
               &_TakMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TakMessage& a, TakMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TakMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakMessage* New() const final {
    return CreateMaybeMessage<TakMessage>(nullptr);
  }

  TakMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TakMessage& from);
  void MergeFrom(const TakMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atakmap.commoncommo.protobuf.v1.TakMessage";
  }
  protected:
  explicit TakMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTakControlFieldNumber = 1,
    kCotEventFieldNumber = 2,
  };
  // .atakmap.commoncommo.protobuf.v1.TakControl takControl = 1;
  bool has_takcontrol() const;
  private:
  bool _internal_has_takcontrol() const;
  public:
  void clear_takcontrol();
  const ::atakmap::commoncommo::protobuf::v1::TakControl& takcontrol() const;
  ::atakmap::commoncommo::protobuf::v1::TakControl* release_takcontrol();
  ::atakmap::commoncommo::protobuf::v1::TakControl* mutable_takcontrol();
  void set_allocated_takcontrol(::atakmap::commoncommo::protobuf::v1::TakControl* takcontrol);
  private:
  const ::atakmap::commoncommo::protobuf::v1::TakControl& _internal_takcontrol() const;
  ::atakmap::commoncommo::protobuf::v1::TakControl* _internal_mutable_takcontrol();
  public:
  void unsafe_arena_set_allocated_takcontrol(
      ::atakmap::commoncommo::protobuf::v1::TakControl* takcontrol);
  ::atakmap::commoncommo::protobuf::v1::TakControl* unsafe_arena_release_takcontrol();

  // .atakmap.commoncommo.protobuf.v1.CotEvent cotEvent = 2;
  bool has_cotevent() const;
  private:
  bool _internal_has_cotevent() const;
  public:
  void clear_cotevent();
  const ::atakmap::commoncommo::protobuf::v1::CotEvent& cotevent() const;
  ::atakmap::commoncommo::protobuf::v1::CotEvent* release_cotevent();
  ::atakmap::commoncommo::protobuf::v1::CotEvent* mutable_cotevent();
  void set_allocated_cotevent(::atakmap::commoncommo::protobuf::v1::CotEvent* cotevent);
  private:
  const ::atakmap::commoncommo::protobuf::v1::CotEvent& _internal_cotevent() const;
  ::atakmap::commoncommo::protobuf::v1::CotEvent* _internal_mutable_cotevent();
  public:
  void unsafe_arena_set_allocated_cotevent(
      ::atakmap::commoncommo::protobuf::v1::CotEvent* cotevent);
  ::atakmap::commoncommo::protobuf::v1::CotEvent* unsafe_arena_release_cotevent();

  // @@protoc_insertion_point(class_scope:atakmap.commoncommo.protobuf.v1.TakMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atakmap::commoncommo::protobuf::v1::TakControl* takcontrol_;
  ::atakmap::commoncommo::protobuf::v1::CotEvent* cotevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_takmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TakMessage

// .atakmap.commoncommo.protobuf.v1.TakControl takControl = 1;
inline bool TakMessage::_internal_has_takcontrol() const {
  return this != internal_default_instance() && takcontrol_ != nullptr;
}
inline bool TakMessage::has_takcontrol() const {
  return _internal_has_takcontrol();
}
inline const ::atakmap::commoncommo::protobuf::v1::TakControl& TakMessage::_internal_takcontrol() const {
  const ::atakmap::commoncommo::protobuf::v1::TakControl* p = takcontrol_;
  return p != nullptr ? *p : *reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::TakControl*>(
      &::atakmap::commoncommo::protobuf::v1::_TakControl_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::TakControl& TakMessage::takcontrol() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.TakMessage.takControl)
  return _internal_takcontrol();
}
inline void TakMessage::unsafe_arena_set_allocated_takcontrol(
    ::atakmap::commoncommo::protobuf::v1::TakControl* takcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(takcontrol_);
  }
  takcontrol_ = takcontrol;
  if (takcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.TakMessage.takControl)
}
inline ::atakmap::commoncommo::protobuf::v1::TakControl* TakMessage::release_takcontrol() {
  auto temp = unsafe_arena_release_takcontrol();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::TakControl* TakMessage::unsafe_arena_release_takcontrol() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.TakMessage.takControl)
  
  ::atakmap::commoncommo::protobuf::v1::TakControl* temp = takcontrol_;
  takcontrol_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::TakControl* TakMessage::_internal_mutable_takcontrol() {
  
  if (takcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::TakControl>(GetArena());
    takcontrol_ = p;
  }
  return takcontrol_;
}
inline ::atakmap::commoncommo::protobuf::v1::TakControl* TakMessage::mutable_takcontrol() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.TakMessage.takControl)
  return _internal_mutable_takcontrol();
}
inline void TakMessage::set_allocated_takcontrol(::atakmap::commoncommo::protobuf::v1::TakControl* takcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(takcontrol_);
  }
  if (takcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(takcontrol)->GetArena();
    if (message_arena != submessage_arena) {
      takcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, takcontrol, submessage_arena);
    }
    
  } else {
    
  }
  takcontrol_ = takcontrol;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.TakMessage.takControl)
}

// .atakmap.commoncommo.protobuf.v1.CotEvent cotEvent = 2;
inline bool TakMessage::_internal_has_cotevent() const {
  return this != internal_default_instance() && cotevent_ != nullptr;
}
inline bool TakMessage::has_cotevent() const {
  return _internal_has_cotevent();
}
inline const ::atakmap::commoncommo::protobuf::v1::CotEvent& TakMessage::_internal_cotevent() const {
  const ::atakmap::commoncommo::protobuf::v1::CotEvent* p = cotevent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::CotEvent*>(
      &::atakmap::commoncommo::protobuf::v1::_CotEvent_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::CotEvent& TakMessage::cotevent() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.TakMessage.cotEvent)
  return _internal_cotevent();
}
inline void TakMessage::unsafe_arena_set_allocated_cotevent(
    ::atakmap::commoncommo::protobuf::v1::CotEvent* cotevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cotevent_);
  }
  cotevent_ = cotevent;
  if (cotevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.TakMessage.cotEvent)
}
inline ::atakmap::commoncommo::protobuf::v1::CotEvent* TakMessage::release_cotevent() {
  auto temp = unsafe_arena_release_cotevent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::CotEvent* TakMessage::unsafe_arena_release_cotevent() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.TakMessage.cotEvent)
  
  ::atakmap::commoncommo::protobuf::v1::CotEvent* temp = cotevent_;
  cotevent_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::CotEvent* TakMessage::_internal_mutable_cotevent() {
  
  if (cotevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::CotEvent>(GetArena());
    cotevent_ = p;
  }
  return cotevent_;
}
inline ::atakmap::commoncommo::protobuf::v1::CotEvent* TakMessage::mutable_cotevent() {
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.TakMessage.cotEvent)
  return _internal_mutable_cotevent();
}
inline void TakMessage::set_allocated_cotevent(::atakmap::commoncommo::protobuf::v1::CotEvent* cotevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cotevent_);
  }
  if (cotevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cotevent)->GetArena();
    if (message_arena != submessage_arena) {
      cotevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cotevent, submessage_arena);
    }
    
  } else {
    
  }
  cotevent_ = cotevent;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.TakMessage.cotEvent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_takmessage_2eproto
